import cv2  # импортируем библиотеку для работы с изображениями
from pyzbar import pyzbar  # импортируем модуль для декодирования QR-кодов
import re  # импортируем модуль регулярных выражений
import os  # импортируем модуль для работы с операционной системой


def get_link_qr_code(user_id):
    # декодируем QR-код на изображении, которое было сохранено как файл img_{user_id}.png в папке src
    data = pyzbar.decode(cv2.imread(f'src/img_{user_id}.png'))
    # извлекаем данные из первого QR-кода, найденного на изображении, и декодируем его с помощью кодировки utf-8
    link = data[0].data.decode("utf-8")
    # регулярное выражение, которое используется для поиска URL-адресов в тексте
    expression = r'(http?://(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?://(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})'
    # компилируем регулярное выражение в объект регулярного выражения, который затем может быть использован для поиска соответствующих строк в тексте
    regex = re.compile(expression, re.IGNORECASE)
    try:
        # удаляем файл изображения после его обработки
        os.remove(f'src/img_{user_id}.png')
    except:
        pass
    if regex.match(link):
        # если URL-адрес соответствует регулярному выражению, то функция возвращает этот URL-адрес
        return link
    else:
        # если URL-адрес не соответствует регулярному выражению, то функция возвращает False
        return False
