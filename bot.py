import time
from urllib.parse import urlparse
from aiogram.utils import executor
from config import *
from src.convert_qrcode_to_link import get_link_qr_code
from src.link_check import check_link
from aiogram.dispatcher import FSMContext
from utils import States
from keyboards import keyboard_start
from all_bot_messages import *


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–ª—É–¥–∞
async def anti_flood(message: types.Message, *args, **kwargs):
    await message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
# –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ URL_STATE –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start'], state='*')
@dp.throttled(anti_flood, rate=1)
async def process_start_command(message: types.Message, state: FSMContext):
    await state.set_state(States.all()[0])
    await message.answer(greetings, reply_markup=keyboard_start)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ë–æ—Ç–∞üöÄ"
# –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ URL_STATE –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å QR-–∫–æ–¥ –∏–ª–∏ —Å—Å—ã–ª–∫—É
@dp.message_handler(text='–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ë–æ—Ç–∞üöÄ', state='*')
@dp.throttled(anti_flood, rate=1)
async def start_menu(message: types.Message, state: FSMContext):
    await state.set_state(States.all()[0])
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É <b>QR-Code</b> –∏–ª–∏ <b>—Å—Å—ã–ª–∫—É</b>:')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
@dp.message_handler(commands=["help"], state='*')
@dp.throttled(anti_flood, rate=1)
async def cmd_help(message: types.Message):
    await message.answer(instruction)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# –ü–æ–ª—É—á–∞–µ—Ç URL-–∞–¥—Ä–µ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
@dp.message_handler(state=States.URL_STATE[0], content_types=['text'])
@dp.throttled(anti_flood, rate=1)
async def solution_url(message: types.Message, state: FSMContext):
    url = message.text
    await message.reply("üîÖ –ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏... üîÖ", reply=False)
    time.sleep(1)
    try:
        parsed_url = urlparse(url)
        domain = parsed_url.scheme + '://' + parsed_url.netloc + '/'
        result = check_link(domain)
        time.sleep(1)
        await message.reply(output_table(domain=domain, result=result), reply=False)
        await state.set_state(States.all()[0])
    except:
        try:
            parsed_url = urlparse(url)
            domain = 'http://' + parsed_url.netloc + '/'
            result = check_link(domain)
            time.sleep(1)
            await message.reply(error_ban_url, parse_mode='HTML', reply=False)
            time.sleep(1)
            await message.reply(output_table(domain=domain, result=result), parse_mode="HTML", reply=False)
            await state.set_state(States.all()[0])
        except:
            await message.reply(error_url, parse_mode='HTML', reply=False)
            await state.set_state(States.all()[0])


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π
# –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–∑–≤–ª–µ–∫–∞–µ—Ç URL-–∞–¥—Ä–µ—Å –∏–∑ –Ω–µ–≥–æ,
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
@dp.message_handler(state=States.URL_STATE[0], content_types=['photo'])
@dp.throttled(anti_flood, rate=1)
async def solution_qrcode(message: types.Message, state: FSMContext):
    await message.reply("‚¨áÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è... ‚¨áÔ∏è", reply=False)
    time.sleep(1)
    user_id = message.from_user.id
    await message.photo[-1].download(f'src/img_{user_id}.png')
    try:
        url = get_link_qr_code(user_id=user_id)
        await message.reply("üîÖ –ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏... üîÖ", reply=False)
        time.sleep(1)
        try:
            time.sleep(1)
            parsed_url = urlparse(url)
            domain = parsed_url.scheme + '://' + parsed_url.netloc + '/'
            result = check_link(domain)
            await message.reply(output_table(domain=domain, result=result), reply=False)
            await state.set_state(States.all()[0])
        except:
            try:
                time.sleep(1)
                parsed_url = urlparse(url)
                domain = 'http://' + parsed_url.netloc + parsed_url.path
                result = check_link(domain)
                await message.reply(error_ban_url, parse_mode='HTML', reply=False)
                time.sleep(1)
                await message.reply(output_table(domain=domain, result=result), parse_mode='HTML', reply=False)
                await state.set_state(States.all()[0])
            except:
                await message.reply("<b>‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –≤ QR-–∫–æ–¥–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è... ‚ö†Ô∏è</b>", parse_mode='HTML', reply=False)
                await state.set_state(States.all()[0])
    except:
        await message.reply(error_qrcode, parse_mode='HTML', reply=False)
        await state.set_state(States.all()[0])


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
if __name__ == '__main__':
    executor.start_polling(dp)
